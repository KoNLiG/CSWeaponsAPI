# vim: set sts=2 ts=8 sw=2 tw=99 et ft=python:

import os

# Simple extensions do not need to modify this file.

class SDK(object):
  def __init__(self, sdk, ext, aDef, name, platform, dir):
    self.folder = 'hl2sdk-' + dir
    self.envvar = sdk
    self.ext = ext
    self.code = aDef
    self.define = name
    self.platform = platform
    self.name = dir
    self.path = None # Actual path

WinOnly = ['windows']
WinLinux = ['windows', 'linux']
WinLinuxMac = ['windows', 'linux', 'mac']

CSGOSDK = SDK(sdk='HL2SDKCSGO', ext='2.csgo', aDef='20', name='CSGO', platform=WinLinuxMac, dir='csgo')

def ResolveEnvPath(env, folder):
  if env in os.environ:
    path = os.environ[env]
    if os.path.isdir(path):
      return path
    return None

  head = os.getcwd()
  oldhead = None
  while head != None and head != oldhead:
    path = os.path.join(head, folder)
    if os.path.isdir(path):
      return path
    oldhead = head
    head, tail = os.path.split(head)

  return None

def Normalize(path):
  return os.path.abspath(os.path.normpath(path))

class ExtensionConfig(object):
  def __init__(self):
    self.sdk = CSGOSDK
    self.binaries = []
    self.extensions = []
    self.generated_headers = None
    self.sm_root = None

  @property
  def tag(self):
    return 'Debug' if builder.options.debug == '1' else 'Release'

  def detectSDKs(self):
    if builder.options.hl2sdk_root:
      sdk_path = os.path.join(builder.options.hl2sdk_root, self.sdk.folder)
    else:
      sdk_path = ResolveEnvPath(self.sdk.envvar, self.sdk.folder)
    if sdk_path is None or not os.path.isdir(sdk_path):
      raise Exception('Could not find a valid path for {0}'.format(self.sdk.envvar))
    else:
      self.sdk.path = Normalize(sdk_path)

    if builder.options.sm_path:
      self.sm_root = builder.options.sm_path
    else:
      self.sm_root = ResolveEnvPath('SOURCEMOD18', 'sourcemod-1.8')
      if not self.sm_root:
        self.sm_root = ResolveEnvPath('SOURCEMOD', 'sourcemod')
      if not self.sm_root:
        self.sm_root = ResolveEnvPath('SOURCEMOD_DEV', 'sourcemod-central')

    if not self.sm_root or not os.path.isdir(self.sm_root):
      raise Exception('Could not find a source copy of SourceMod')
    self.sm_root = Normalize(self.sm_root)

  def configure(self):
    cxx = builder.DetectCompilers()

    if cxx.like('gcc'):
      self.configure_gcc(cxx)
    elif cxx.vendor == 'msvc':
      self.configure_msvc(cxx)

    # Optimizaiton
    if builder.options.opt == '1':
      cxx.defines += ['NDEBUG']

    # Debugging
    if builder.options.debug == '1':
      cxx.defines += ['DEBUG', '_DEBUG']

    # Platform-specifics
    if builder.target_platform == 'linux':
      self.configure_linux(cxx)
    elif builder.target_platform == 'windows':
      self.configure_windows(cxx)

    # Finish up.
    cxx.includes += [
      os.path.join(self.sm_root, 'public'),
    ]

  def configure_gcc(self, cxx):
    cxx.defines += [
      'stricmp=strcasecmp',
      '_stricmp=strcasecmp',
      '_snprintf=snprintf',
      '_vsnprintf=vsnprintf',
      'HAVE_STDINT_H',
      'HAVE_STRING_H',
      'GNUC',
    ]
    cxx.cflags += [
      '-pipe',
      '-fno-strict-aliasing',
      '-Wall',
      '-fpermissive',
      '-Wno-unused',
      '-Wno-switch',
      '-Wno-array-bounds',
      '-Wno-macro-redefined',
      '-msse',
      '-m32',
      '-fvisibility=hidden',
    ]
    cxx.cxxflags += [
      '-std=c++14',
      '-fno-exceptions',
      '-fno-threadsafe-statics',
      '-Wno-non-virtual-dtor',
      '-Wno-overloaded-virtual',
      '-fvisibility-inlines-hidden',
    ]
    cxx.linkflags += ['-m32']

    have_gcc, have_clang = cxx.vendor == 'gcc', cxx.vendor == 'clang'
    if cxx.version >= 'clang-3.6':
      cxx.cxxflags += ['-Wno-inconsistent-missing-override']
    if have_clang or (cxx.version >= 'gcc-4.6'):
      cxx.cflags += ['-Wno-narrowing']
    if have_clang or (cxx.version >= 'gcc-4.7'):
      cxx.cxxflags += ['-Wno-delete-non-virtual-dtor']
    if cxx.version >= 'gcc-4.8':
      cxx.cflags += ['-Wno-unused-result']

    if have_clang:
      cxx.cxxflags += ['-Wno-implicit-exception-spec-mismatch']
      if cxx.version >= 'apple-clang-5.1' or cxx.version >= 'clang-3.4':
        cxx.cxxflags += ['-Wno-deprecated-register']
      else:
        cxx.cxxflags += ['-Wno-deprecated']
      cxx.cflags += ['-Wno-sometimes-uninitialized']

    if have_gcc:
      cxx.cflags += ['-mfpmath=sse']

    if builder.options.opt == '1':
      cxx.cflags += ['-O3']

  def configure_msvc(self, cxx):
    if builder.options.debug == '1':
      cxx.cflags += ['/MTd']
      cxx.linkflags += ['/NODEFAULTLIB:libcmt']
    else:
      cxx.cflags += ['/MT']
    cxx.defines += [
      '_CRT_SECURE_NO_DEPRECATE',
      '_CRT_SECURE_NO_WARNINGS',
      '_CRT_NONSTDC_NO_DEPRECATE',
      '_ITERATOR_DEBUG_LEVEL=0',
    ]
    cxx.cflags += [
      '/W3',
    ]
    cxx.cxxflags += [
      '/EHsc',
      '/GR-',
      '/TP',
    ]
    cxx.linkflags += [
      '/MACHINE:X86',
      'kernel32.lib',
      'user32.lib',
      'gdi32.lib',
      'winspool.lib',
      'comdlg32.lib',
      'advapi32.lib',
      'shell32.lib',
      'ole32.lib',
      'oleaut32.lib',
      'uuid.lib',
      'odbc32.lib',
      'odbccp32.lib',
    ]

    if builder.options.opt == '1':
      cxx.cflags += ['/Ox', '/Zo']
      cxx.linkflags += ['/OPT:ICF', '/OPT:REF']

    if builder.options.debug == '1':
      cxx.cflags += ['/Od', '/RTC1']

    # This needs to be after our optimization flags which could otherwise disable it.
    # Don't omit the frame pointer.
    cxx.cflags += ['/Oy-']

  def configure_linux(self, cxx):
    cxx.defines += ['_LINUX', 'POSIX']
    cxx.linkflags += ['-Wl,--exclude-libs,ALL', '-lm']
    if cxx.vendor == 'gcc':
      cxx.linkflags += ['-static-libgcc']
    elif cxx.vendor == 'clang':
      cxx.linkflags += ['-lgcc_eh']

  def configure_windows(self, cxx):
    cxx.defines += ['WIN32', '_WINDOWS']

  def ConfigureForExtension(self, context, compiler):
    compiler.cxxincludes += [
      os.path.join(context.currentSourcePath),
      os.path.join(context.currentSourcePath, 'sdk'),
      os.path.join(self.sm_root, 'public'),
      os.path.join(self.sm_root, 'public', 'extensions'),
      os.path.join(self.sm_root, 'sourcepawn', 'include'),
      os.path.join(self.sm_root, 'public', 'amtl', 'amtl'),
      os.path.join(self.sm_root, 'public', 'amtl'),
    ]
    return compiler

  def ConfigureForHL2(self, binary, sdk):
    compiler = binary.compiler

    compiler.defines += ['SE_' + CSGOSDK.define + '=' + CSGOSDK.code]

    paths = [
      ['public'],
      ['public', 'engine'],
      ['public', 'mathlib'],
      ['public', 'vstdlib'],
      ['public', 'tier0'],
      ['public', 'tier1']
    ]

    paths.append(['public', 'game', 'server'])
    paths.append(['public', 'toolframework'])
    paths.append(['game', 'shared'])
    paths.append(['common'])

    compiler.defines += ['SOURCE_ENGINE=' + sdk.code]

    if compiler.like('msvc'):
      compiler.defines += ['COMPILER_MSVC', 'COMPILER_MSVC32']
    else:
      compiler.defines += ['COMPILER_GCC']

    # For everything after Swarm, this needs to be defined for entity networking
    # to work properly with sendprop value changes.
    compiler.defines += ['NETWORK_VARS_ENABLED']

    if builder.target_platform == 'linux':
      compiler.linkflags += ['-lstdc++']

    for path in paths:
      compiler.cxxincludes += [os.path.join(sdk.path, *path)]

    if builder.target_platform == 'linux':
      if sdk.name == 'episode1':
        lib_folder = os.path.join(sdk.path, 'linux_sdk')
      elif sdk.name in ['sdk2013', 'bms']:
        lib_folder = os.path.join(sdk.path, 'lib', 'public', 'linux32')
      else:
        lib_folder = os.path.join(sdk.path, 'lib', 'linux')

    if builder.target_platform in ['linux']:
      if sdk.name in ['sdk2013', 'bms']:
        compiler.postlink += [
          compiler.Dep(os.path.join(lib_folder, 'tier1.a')),
          compiler.Dep(os.path.join(lib_folder, 'mathlib.a'))
        ]
      else:
        compiler.postlink += [
          compiler.Dep(os.path.join(lib_folder, 'tier1_i486.a')),
          compiler.Dep(os.path.join(lib_folder, 'mathlib_i486.a'))
        ]

      compiler.postlink += [compiler.Dep(os.path.join(lib_folder, 'interfaces_i486.a'))]

    dynamic_libs = []
    if builder.target_platform == 'linux':
      dynamic_libs = ['libtier0.so', 'libvstdlib.so']
    elif builder.target_platform == 'windows':
      libs = ['tier0', 'tier1', 'vstdlib', 'mathlib', 'interfaces']
      for lib in libs:
        lib_path = os.path.join(sdk.path, 'lib', 'public', lib) + '.lib'
        compiler.linkflags.append(compiler.Dep(lib_path))

    for library in dynamic_libs:
      source_path = os.path.join(lib_folder, library)
      output_path = os.path.join(binary.localFolder, library)

      def make_linker(source_path, output_path):
        def link(context, binary):
          cmd_node, (output,) = context.AddSymlink(source_path, output_path)
          return output
        return link

      linker = make_linker(source_path, output_path)
      compiler.linkflags[0:0] = [compiler.Dep(library, linker)]

    return binary

  def HL2Library(self, context, name, sdk):
    binary = context.compiler.Library(name)
    self.ConfigureForExtension(context, binary.compiler)
    return self.ConfigureForHL2(binary, sdk)

  def HL2Project(self, context, name):
    project = context.compiler.LibraryProject(name)
    self.ConfigureForExtension(context, project.compiler)
    return project

  def HL2Config(self, project, name, sdk):
    binary = project.Configure(name, '{0} - {1}'.format(self.tag, sdk.name))
    return self.ConfigureForHL2(binary, sdk)

Extension = ExtensionConfig()
Extension.detectSDKs()
Extension.configure()

# Add additional buildscripts here
BuildScripts = [
  'AMBuilder',
]

if builder.backend == 'amb2':
  BuildScripts += ['PackageScript']

builder.RunBuildScripts(BuildScripts, { 'Extension': Extension})